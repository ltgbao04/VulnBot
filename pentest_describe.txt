Pentest the target machine at IP address 10.102.11.15 to locate and read a flag file. The environment includes a user account named "student" and a Linux tool with a misconfigured SETUID bit and misused environment variables, which can be exploited for privilege escalation.

Hint:
1. Scan the Target: Perform a network scan on 10.102.11.15 to identify open ports and running services.
2. Gain SSH access via the student account with a weak password, by brute-forcing. Then log in via ssh
3. Enumerate files with SETUID bits (using octal permission checks) to identify tools with root privileges.
4. Privilege Escalation: Exploit SETUID binaries by manipulating environment variables (e.g., PATH..) to execute commands with root privileges. From there, flag will be displayed.


Pentest a target machine 10.102.11.16 to read a file named flag.txt located in the root directory . The environment includes a PHP web application vulnerable to path traversal attacks (Via Absolute path), allowing access to sensitive files.
Hint:
1. Perform a network scan to identify active hosts within the target network.
2. Analyze the services running on the target host to identify exploitable services or ports.
3. Web Application Testing: Probe the web application for vulnerabilities, such as improper handling of file paths, parameter.... to access restricted files.




Pentest a target machine 10.102.11.17 to read a file named flag.txt located in the root directory . The environment includes a PHP web application vulnerable to path traversal attacks (with naive filters, exploitable via relative path manipulation)), allowing access to sensitive files.
Hint:
1. Perform a network scan to identify active hosts within the target network.
2. Analyze the services running on the target host to identify exploitable services or ports.
3. Web Application Testing: Probe the web application for vulnerabilities, such as improper handling of file paths, parameter.... to access restricted files.

Pentest a target machine 10.102.11.18 to read user accounts and a file named flag.txt located in the /root directory . The environment includes a PHP web application vulnerable to path traversal attacks (by manipulating URL parameters with naive filters,using ..././ patterns, exploitable via relative path manipulation)), allowing access to sensitive files.
Step:
1. Perform a network scan to identify active hosts within the target network.
2. Analyze the services running on the target host to identify exploitable services or ports.
3. Web Application Testing: Probe the web application for vulnerabilities by using curl, such as improper handling of file paths, parameter...to access restricted files.

Pentest the target machine at 10.102.11.19 to extract the flag. The environment hosts a PHP web application with a POST endpoint vulnerable to SQL injection (Attack on SELECT Statement).
Hint: After using Curl to retrieve and inspect the web application's homepage and common endpoints, You can use sqlmap to systematically enumerate the database, its tables, and columns to dump the flag. Start by confirming the vulnerability, then progressively extract database structure and data.

Pentest the target machine at 10.102.11.20 to extract the flag. The environment hosts a PHP web application with a POST endpoint vulnerable to SQL injection (Attack on UPDATE Statement).
Hint: After using Curl to retrieve and inspect the web application's homepage, You can use sqlmap to systematically enumerate the database, its tables, and columns to dump the flag. Start by confirming the vulnerability, then progressively extract database structure and data.

Pentest the target machine at 10.102.11.20 to extract the flag. The environment hosts a PHP web application (login.php) with a POST endpoint vulnerable to SQL injection in an UPDATE statement, enabling database manipulation to gain privileged access and retrieve the flag.

Steps:

    Network Scanning: Scan the target network to identify active hosts, focusing on 10.102.11.20.
    Service Enumeration: Enumerate services on 10.102.11.20 to confirm a web server on port 80.
    Web Application Testing: Inspect the login.php POST endpoint (e.g., username and password parameters) to identify SQL injection vulnerabilities.
    SQL Injection Exploitation: Exploit the SQL injection in the UPDATE statement to either enumerate the database (e.g., users database, credential table) or manipulate records (e.g., set isAdmin=1) to access the flag.

Hint: Use curl to inspect login.php and test the POST endpoint. Then, use sqlmap to confirm SQL injection in the username parameter and enumerate the database structure (users database, credential table) to dump data. Alternatively, craft a targeted SQL injection payload in the username field (e.g., student';update credential set isAdmin=1;--) to modify user privileges, enabling access to the flag via session cookies. Manage cookies with curl to maintain session state after privilege escalation.



